{
  "version": "1.3.3",
  "revision": 37,
  "structure": [
    {
      "name": "PCD2020-basel.codes",
      "mod": "1604140355359",
      "type": "folder",
      "toggle": "expand",
      "contents": [
        {
          "name": "pcd2020-cocoding_002",
          "mod": "1604145656021",
          "type": "sketch",
          "code": "// https://teddavis.org/p5live/?cc=288oq\n\nlet layer;\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\tlayer = createGraphics(width/4, height/4, WEBGL);\n\tlayer2 = createGraphics(width/4, height/4, WEBGL);\n\tnoSmooth()\n\tpixelDensity(1)\n}\n\nfunction draw() {\n\t\n\tbackground(mouseX, mouseY, frameCount%100);\n\tellipse(frameCount*10%width, mouseY, frameCount%100)\n\t\n\tlayer.reset()\n\tlayer.clear()\n\tlayer.noFill()\n\tlayer.strokeWeight(abs(sin(frameCount)))\n\tlayer.stroke(frameCount%255, 0, frameCount%255)\n\tlayer.rotateY(radians(frameCount))\n\tlayer.rotateX(radians(frameCount * 3))\n\tlayer.translate(mouseX-width/2, 0)\n\tlayer.translate(mouseY-height/2, 0)\n\tlayer.sphere(200)\n\t\n\t\n\t\n\tlayer2.reset()\n\tlayer2.clear()\n\tlayer2.noFill()\n\tlayer2.stroke(255, frameCount%255, frameCount%255)\n\tlayer2.rotateY(radians(frameCount))\n\tlayer2.rotateX(radians(frameCount * 10))\n\tlayer2.translate(mouseX-height/2, 0)\n\tlayer2.torus(100)\n\timage(layer2, 30, 50, width, height)\n\t\n\t        let loopCount = 50;\n        for(let i=0; i < loopCount; i++){\n                //use 'i' for each unique copy\n                strokeWeight(2);\n                // fill(0);\n                noFill()\n\n                //map (input, inMinimum, inMaximum, outMin, outMax)\n                let mySize = map(i, 0, loopCount-1, height, 100);\n                let myStrokeColor = map(i, 0, loopCount-1, 0, 255);\n                stroke(myStrokeColor);\n\n\n                rect(width/10 - i*(width/100 - mouseX)/100, height - i*(height*2 - mouseY+height)/100, mySize, mySize);\n\n                let x = map(i, 0, loopCount-1, 0, width);\n                let y = map(i, 0, loopCount-1, 0, height);\n                ellipse(x + i*mouseX/5000, y + i*mouseY/500, mySize);\n                \n                let x1 = map(i, 0, loopCount-1, 1000, width/2);\n                let y1 = map(i, 0, loopCount-1, 0, height/2);\n                ellipse(x1 + i*mouseX/500, y + i*mouseY/50, mySize);\n        }\n        \n        image(layer, 0, 0, width, height)\n}"
        },
        {
          "name": "pcd2020-cocoding_001",
          "mod": "1604145561597",
          "type": "sketch",
          "code": "// https://teddavis.org/p5live/?cc=288oq\n\nlet layer;\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\tlayer = createGraphics(width/4, height/4, WEBGL);\n\tlayer2 = createGraphics(width/4, height/4, WEBGL);\n\tnoSmooth()\n\tpixelDensity(1)\n}\n\nfunction draw() {\n\t\n\tbackground(mouseX, mouseY, frameCount%100);\n\tellipse(frameCount*10%width, mouseY, frameCount%100)\n\t\n\tlayer.reset()\n\tlayer.clear()\n\tlayer.noFill()\n\tlayer.strokeWeight(abs(sin(frameCount)))\n\tlayer.stroke(frameCount%255, 0, frameCount%255)\n\tlayer.rotateY(radians(frameCount))\n\tlayer.rotateX(radians(frameCount * 3))\n\tlayer.translate(mouseX-width/2, 0)\n\tlayer.translate(mouseY-height/2, 0)\n\tlayer.sphere(200)\n\t\n\t\n\t\n\tlayer2.reset()\n\tlayer2.clear()\n\tlayer2.noFill()\n\tlayer2.stroke(0, frameCount%255, frameCount%255)\n\tlayer2.rotateY(radians(frameCount))\n\tlayer2.rotateX(radians(frameCount * 10))\n\tlayer2.translate(mouseX-height/2, 0)\n\tlayer2.torus(200)\n\timage(layer2, 0, 0, width, height)\n\t\n\t        let loopCount = 50;\n        for(let i=0; i < loopCount; i++){\n                //use 'i' for each unique copy\n                strokeWeight(2);\n                fill(0);\n\n                //map (input, inMinimum, inMaximum, outMin, outMax)\n                let mySize = map(i, 0, loopCount-1, height, 100);\n                let myStrokeColor = map(i, 0, loopCount-1, 0, 255);\n                stroke(myStrokeColor);\n\n\n                rect(width/10 - i*(width/100 - mouseX)/100, height - i*(height*2 - mouseY+height)/100, mySize, mySize);\n\n                let x = map(i, 0, loopCount-1, 0, width);\n                let y = map(i, 0, loopCount-1, 0, height);\n                ellipse(x + i*mouseX/5000, y + i*mouseY/500, mySize);\n                \n                let x1 = map(i, 0, loopCount-1, 1000, width/2);\n                let y1 = map(i, 0, loopCount-1, 0, height/2);\n                ellipse(x1 + i*mouseX/500, y + i*mouseY/50, mySize);\n        }\n        \n        image(layer, 0, 0, width, height)\n}"
        },
        {
          "name": "pcd2020-layers-3d",
          "mod": "1604275292351",
          "type": "sketch",
          "code": "// https://teddavis.org/p5live/?cc=288oq\n\nlet layer;\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\tlayer = createGraphics(width, height, WEBGL);\n\tpixelDensity(1)\n}\n\nfunction draw() {\n\t\n\tbackground(0, 10);\n\t// ellipse(frameCount*10%width, mouseY, 50)\n\t\n\t\n\t\n\tlayer.reset()\n\tlayer.clear()\n\tlayer.noFill()\n\tlayer.stroke(frameCount%255, 0, frameCount%255)\n\tlayer.translate(mouseX-width/2, mouseY-height/2)\n\tlayer.rotateY(radians(frameCount))\n\tlayer.rotateX(radians(frameCount * 3))\n\tlayer.sphere(200)\n\t\n\timage(layer, 0, 0)\n\t\n}"
        },
        {
          "name": "pcd2020-type-3d",
          "mod": "1604275213291",
          "type": "sketch",
          "code": "let font;\n\nfunction preload() {\n\tfont = loadFont(\"includes/demos-data/fonts/RobotoMono-Regular.otf\");\n}\n\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL);\n\ttextFont(font)\n}\n\nfunction draw() {\n\tif(keyIsPressed){\n\t\tbackground(0)\n\t}\n\t// ortho()\n\tfill(frameCount%255)\n\ttextSize(100)\n\trotateY(radians(frameCount))\n\ttext(\"hello \\\"world\\\"\", mouseX-width/2, mouseY-height/2)\n}"
        },
        {
          "name": "pcd2020-sin-3d",
          "mod": "1604275168308",
          "type": "sketch",
          "code": "function setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL);\n\t\n}\n\nfunction draw() {\n\t// gives smooth fade when active\n\t background(0, 255, 255)\n\t\n\t// println(0.01*frameCount)\n\tlet positionX =  sin(0.01*frameCount)*width/3 // -1 ... +1\n\tlet positionY =  sin(0.021*frameCount )*height/3 // + PI/2 \n\tlet positionZ =  sin(0.031*frameCount )*10000 // + PI/2 \n\t\n\tstrokeWeight(abs(sin(frameCount*0.01))*5)\n\t// fill(abs(sin(frameCount*0.01))*255, abs(sin(frameCount*0.05))*255, abs(sin(frameCount*0.03))*255)\n\tfill(0, 0, 255, 100)\n\tpush()\n\t// translate(positionX, positionY, positionZ)\n\trotateY(radians(frameCount)) // radians(deg) <- converts to PI\n\tellipse(positionX, positionY, abs(sin(frameCount*0.005))*300)\n\tbox(200)\n\tsphere(height)\n\tpop()\n}"
        },
        {
          "name": "pcd2020-sin",
          "mod": "1604143123031",
          "type": "sketch",
          "code": "function setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\t\n}\n\nfunction draw() {\n\t// gives smooth fade when active\n\tbackground(0, 255, 255, 5)\n\t// println(0.01*frameCount)\n\tlet positionX =  width/2 + sin(0.1*frameCount)*width/3 // -1 ... +1\n\tlet positionY =  height/2 + sin(0.21*frameCount )*height/3 // + PI/2 \n\t\n\tstrokeWeight(abs(sin(frameCount*0.01))*30)\n\tfill(abs(sin(frameCount*0.01))*255, abs(sin(frameCount*0.05))*255, abs(sin(frameCount*0.03))*255)\n\tellipse(positionX, positionY, abs(sin(frameCount*0.005))*500)\n}"
        },
        {
          "name": "pcd2020-painter",
          "mod": "1604142101706",
          "type": "sketch",
          "code": "function setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\tbackground(0, 255, 255)\n}\n\nfunction draw() {\n\t\n\tstrokeWeight(4)\n\tif(mouseIsPressed){\n\t\tline(mouseX, mouseY, pmouseX, pmouseY)\n\t}\n}\n\nfunction keyPressed(){\n\t// println(keyCode) // \n\tif(keyCode == 8){\n\t\tbackground(0, 255, 255)\n\t}\n}"
        },
        {
          "name": "pcd2020-random-conditionals",
          "mod": "1604141568236",
          "type": "sketch",
          "code": "// basel.codes/2020\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\t\n}\n\nfunction draw() {\n\tbackground(0, 255, 255, 10)\n\tfill(100, frameCount%240, random(255))\n\t\n\tlet rectanglePosition = 500;\n\t\n\t// rect(rectanglePosition, 100, mouseX, mouseY);\n\t\n\t\n\t// println(frameCount)\n\tif (mouseX < width/2){\n\t\tfill(0)\n\t} else if (mouseX < width * .75) {\n\t\tfill(255)\n\t} else {\n\t\tfill(255, 0, 0)\n\t}\n\t\n\tellipse(random(width), random(height), random(10, 30))\n\tif(mouseIsPressed){\n\t\tellipse(random(width), random(height), random(100, 300))\n\t}\n\tstroke(mouseY%255, frameCount%255, 0)\n\t// strokeWeight(mouseX)\n\t\n\t\n\t// line(mouseX, mouseY, pmouseX, pmouseY);\n}"
        },
        {
          "name": "pcd2020-primitives",
          "mod": "1604275063258",
          "type": "sketch",
          "code": "// basel.codes/2020\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\t\n}\n\nfunction draw() {\n\tbackground(0, 255, 255, 10)\n\tfill(0, frameCount%240, 0)\n\tellipse(width/2, height/2, 100)\n\tlet rectanglePosition = 100;\n\t\n\trect(rectanglePosition, 100, mouseX - rectanglePosition, mouseY);\n\t\n\t\n\t// println(frameCount)\n\tstroke(mouseY%255, frameCount%255, 0)\n\t// strokeWeight(mouseX)\n\t\n\t\n\tline(mouseX, mouseY, pmouseX, pmouseY);\n}"
        }
      ]
    }
  ],
  "count": {
    "sketches": 9,
    "folders": 1
  }
}